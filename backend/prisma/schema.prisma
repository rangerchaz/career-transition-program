// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  intakeSessions   IntakeSession[]
  careerPlans      CareerPlan[]
  progressTracking ProgressTracking[]
  agentInteractions AgentInteraction[]

  @@map("users")
}

model IntakeSession {
  id                String   @id @default(uuid())
  userId            String
  conversationHistory Json   @default("[]")
  currentStep       Int      @default(0)
  isComplete        Boolean  @default(false)
  collectedData     Json     @default("{}")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("intake_sessions")
}

model CareerPlan {
  id          String   @id @default(uuid())
  userId      String
  targetRole  String
  currentRole String
  timeline    String
  phases      Json     @default("[]")
  agentId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  progressTracking ProgressTracking[]

  @@map("career_plans")
}

model ProgressTracking {
  id             String   @id @default(uuid())
  userId         String
  planId         String
  completedTasks Json     @default("[]")
  currentPhase   Int      @default(0)
  lastActivity   DateTime @default(now())
  streakDays     Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan CareerPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([userId, planId])
  @@map("progress_tracking")
}

model AgentInteraction {
  id        String   @id @default(uuid())
  userId    String
  agentId   String
  message   String   @db.Text
  response  String   @db.Text
  context   Json     @default("{}")
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("agent_interactions")
  @@index([userId, agentId])
}
